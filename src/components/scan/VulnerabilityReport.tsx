import { Card } from "@/components/ui/card";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { Shield, AlertTriangle, Lock, Info } from "lucide-react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

interface ScanInfo {
  target: string;
  timestamp: string;
  scan_name: string;
  scan_id: string;
}

interface VulnerabilityReportProps {
  scanResult: any;
  scanInfo?: ScanInfo; // Make scanInfo optional to maintain backward compatibility
}

export const VulnerabilityReport = ({ scanResult, scanInfo }: VulnerabilityReportProps) => {
  // Process and organize vulnerability data
  const processVulnerabilities = () => {
    if (!scanResult) return { findings: [], stats: { high: 0, medium: 0, low: 0 } };
    
    const results = typeof scanResult === 'string' ? JSON.parse(scanResult) : scanResult;
    const findings: any[] = [];
    const stats = { high: 0, medium: 0, low: 0 };
    
    results.forEach((host: any) => {
      Object.entries(host.protocols).forEach(([protocol, ports]: [string, any]) => {
        ports.forEach((port: any) => {
          const risk = assessRisk(port);
          stats[risk.level.toLowerCase()]++;
          
          findings.push({
            host: host.host,
            port: port.port,
            service: port.service,
            risk: risk,
            details: {
              version: port.version,
              product: port.product,
              extrainfo: port.extrainfo
            }
          });
        });
      });
    });
    
    return { findings, stats };
  };

  const assessRisk = (port: any) => {
    const highRiskServices = ['telnet', 'ftp', 'rsh', 'rlogin'];
    const mediumRiskServices = ['http', 'smtp', 'pop3', 'imap'];
    
    if (highRiskServices.some(s => port.service.toLowerCase().includes(s))) {
      return {
        level: 'High',
        color: '#ef4444',
        description: 'Critical security vulnerability detected'
      };
    }
    if (mediumRiskServices.some(s => port.service.toLowerCase().includes(s))) {
      return {
        level: 'Medium',
        color: '#f59e0b',
        description: 'Potential security concern identified'
      };
    }
    return {
      level: 'Low',
      color: '#10b981',
      description: 'Minor or no security concerns'
    };
  };

  const { findings, stats } = processVulnerabilities();
  
  const pieChartData = [
    { name: 'High Risk', value: stats.high, color: '#ef4444' },
    { name: 'Medium Risk', value: stats.medium, color: '#f59e0b' },
    { name: 'Low Risk', value: stats.low, color: '#10b981' }
  ];

  return (
    <div className="space-y-6 animate-enter">
      <Card className="p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Shield className="h-5 w-5 text-cyber-teal" />
            <h3 className="text-lg font-semibold">Vulnerability Assessment Report</h3>
          </div>
          <Badge variant={stats.high > 0 ? "destructive" : "default"}>
            {stats.high > 0 ? "Critical Issues Found" : "No Critical Issues"}
          </Badge>
        </div>

        {scanInfo && (
          <div className="mt-2 text-sm text-muted-foreground">
            <p>Target: {scanInfo.target}</p>
            <p>Scan ID: {scanInfo.scan_id}</p>
            <p>Date: {new Date(scanInfo.timestamp).toLocaleString()}</p>
          </div>
        )}

        <div className="grid md:grid-cols-2 gap-6 mt-6">
          <Card className="p-4">
            <h4 className="text-sm font-medium text-muted-foreground mb-4">Risk Distribution</h4>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieChartData}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={80}
                    paddingAngle={5}
                    dataKey="value"
                  >
                    {pieChartData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </Card>

          <Card className="p-4">
            <h4 className="text-sm font-medium text-muted-foreground mb-4">Risk Summary</h4>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-red-500" />
                  <span>High Risk</span>
                </div>
                <Badge variant="destructive">{stats.high}</Badge>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-yellow-500" />
                  <span>Medium Risk</span>
                </div>
                <Badge variant="secondary">{stats.medium}</Badge>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Shield className="h-4 w-4 text-green-500" />
                  <span>Low Risk</span>
                </div>
                <Badge variant="default">{stats.low}</Badge>
              </div>
            </div>
          </Card>
        </div>
      </Card>

      <Card className="p-6">
        <h4 className="text-lg font-semibold mb-4">Detailed Findings</h4>
        <Accordion type="single" collapsible className="w-full space-y-2">
          {findings.map((finding, index) => (
            <AccordionItem key={index} value={`item-${index}`}>
              <AccordionTrigger className="hover:no-underline">
                <div className="flex items-center gap-2">
                  {finding.risk.level === 'High' ? (
                    <Lock className="h-4 w-4 text-red-500" />
                  ) : (
                    <Info className="h-4 w-4 text-blue-500" />
                  )}
                  <span>
                    {finding.host} - Port {finding.port} ({finding.service})
                  </span>
                  <Badge 
                    variant={
                      finding.risk.level === 'High' ? "destructive" :
                      finding.risk.level === 'Medium' ? "secondary" :
                      "default"
                    }
                    className="ml-2"
                  >
                    {finding.risk.level} Risk
                  </Badge>
                </div>
              </AccordionTrigger>
              <AccordionContent className="pt-4">
                <Alert>
                  <AlertTitle>Risk Assessment</AlertTitle>
                  <AlertDescription>{finding.risk.description}</AlertDescription>
                </Alert>
                
                <div className="mt-4 space-y-2">
                  <p><span className="font-medium">Version:</span> {finding.details.version || 'Unknown'}</p>
                  <p><span className="font-medium">Product:</span> {finding.details.product || 'Unknown'}</p>
                  {finding.details.extrainfo && (
                    <p><span className="font-medium">Additional Info:</span> {finding.details.extrainfo}</p>
                  )}
                </div>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </Card>
    </div>
  );
};
